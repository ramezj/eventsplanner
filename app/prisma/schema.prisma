// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String             @id
  name                  String
  email                 String
  emailVerified         Boolean
  image                 String?
  createdAt             DateTime
  updatedAt             DateTime
  isPremium             Boolean            @default(false)
  sessions              Session[]
  accounts              Account[]
  userEvents            EventUser[]
  currentEventId        String?
  currentEvent          Event?      @relation(fields: [currentEventId], references: [id], onDelete: SetNull)
  @@unique([email])
  @@map("user")
}

model Event {
  id          String               @id @default(cuid())
  name        String
  slug        String               @unique
  description String               @default("")
  website     String?
  premium     Boolean              @default(false)
  users       EventUser[]
  invitations EventInvite[]
  User        User[]
}

model EventUser {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           Role         @default(member)
  eventId String
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

enum Role {
  owner
  member
}

model EventInvite {
  id             String       @id @default(cuid())
  role           Role         @default(member)
  email          String       
  eventId String
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
